##  R script for pre/post burn surveys at Ichauway, Spring 2016.
##
##
##  Late Jul 2017; updated Oct 2019; prep for MS review Dec 2021. 
############################################

##  To use this script:
##  Fist set working directory to the one containing the folders 'case_study' and 'simulations'.  All paths here are relative to that directory.

##  Load data, etc.
##  This compressed R file contains several data lists for use with various JAGS models:
load('case_study/data/ich_data.R')

##  This file contains a function definition, for use in running JAGS models in parallel:
source('case_study/functions/ich_funs.r')


##  Pass binned diameter values for augmented burrows to JAGS as data.  This ensures that they follow the desired distribution, for each dataset.
dat.near$diam.bin <- sample.int(size = dat.near$M, n = length(dat.near$burr.near), prob = dat.near$burr.near, replace = T)
pre.lst$diam.bin <- sample.int(size = pre.lst$M, n = length(pre.lst$diam.hist), prob = pre.lst$diam.hist, replace = T)
pre.near$diam.bin <- sample.int(size = pre.near$M, n = length(pre.near$burr.near), prob = pre.near$burr.near, replace = T)
pre.nrPst$diam.bin <- sample.int(size = pre.nrPst$M, n = length(pre.nrPst$burr.near), prob = pre.nrPst$burr.near, replace = T)

                
###  Here are the model/data combinations from the Table in the MS:
#both_Int
#both_IntSc (intercept- and scale-varying)
#pre_Int_30 (xi_brk > 30 and xi_int < 0.5)
#pre_Int
#pre_IntSc
#pre_Conv

###  For table in MS:  to get estimates in the summary table, run a particular model/data combination and then run:
# N <- outp$s$quantiles[grep(rownames(outp$s$quantiles), pattern = "N", fixed = T),c(1,3,5)]
# xi.int <- outp$s$quantiles[grep(rownames(outp$s$quantiles), pattern = "xi.int", fixed = T),c(1,3,5)]
# xi.brk <- outp$s$quantiles[grep(rownames(outp$s$quantiles), pattern = "xi.break", fixed = T),c(1,3,5)]
# sigma <- outp$s$quantiles[grep(rownames(outp$s$quantiles), pattern = "sigma", fixed = T),c(1,3,5)]



##############################################################################################################
##############################################################################################################
# 1.  Model:  "both_Int"

outp <- runfun(modl = "ich_revised_xi",
               name.suffix = "jnt",
               datl = dat.near,
               initl = list(w = dat.near$y.or),
               iter.samp = 5000,
               min.xi.brk = 5,
               max.xi.5 = 1,
               vars = c("xi.5",
                  "xi.break",
                  "xi.beta",
#                  "tau.int",
#                  "tau.break",
#                  "tau.beta",
                  "sigma",
#                  "deviance",
                  "D", "p.pred"),
               pre = T,
               post = T)

##############################################################################################################
##############################################################################################################
# 2.  Model:  "pre_Int"

outp <- runfun(modl = "ich_revised_xi",
               name.suffix = "pre",
               datl = pre.near,
               initl = list(w = drop(pre.near$y)),
               iter.samp = 5000,
               min.xi.brk = 5,
               max.xi.5 = 1,
               vars = c("xi.5",
                  "xi.break",
                  "xi.beta",
                  "sigma",
                  "D",
                  "p.pred"),
               pre = T,
               post = F)


####  A test---
#outp2 <- runfun(modl = "ich_revised_xi",
#               name.suffix = "preTest2",
#               datl = pre.near,
#               initl = list(w = drop(pre.near$y)),
#               iter.samp = 5000,
#               min.xi.brk = 5,
#               max.xi.5 = 1,
#               vars = c("xi.5",
#                  "xi.break",
#                  "xi.beta",
#                  "sigma",
#                  "D",
#                  "p.pred",
#                  "dist",
#                  "diam.bin"),
#               pre = T,
#               post = F)


               
#                  paste0("dist[", pre.near$n.obs+0:3, "]"),
#                  paste0("diam.bin[", pre.near$n.obs+0:3, "]"),
#                  paste0("dL[", pre.near$n.obs+0:3, "]"),
#                  paste0("diam[", pre.near$n.obs+0:3, "]"),
#                  paste0("xi[", pre.near$n.obs+0:3, ",1]"),
#                  paste0("p[", pre.near$n.obs+0:3, ",1]")
#                  
##############################################################################################################
##############################################################################################################
# 3.  Model:  "pre_Int30"
outp <- runfun(modl = "ich_revised_xi",
               name.suffix = "preXi30",
               datl = pre.near,
               initl = list(w = drop(pre.near$y)),
               iter.samp = 5000,
               min.xi.brk = 30,
               max.xi.5 = 0.5,
               vars = c("xi.5",
                  "xi.break",
                  "xi.beta",
                  "sigma",
                  "D", "p.pred"),
               pre = T,
               post = F)

##############################################################################################################
##############################################################################################################
# 4.  Model:  "pre_Int_nrPst" :  leave `min.xi.brk` and `max.xi.5` free, but use the burrow width distribution from `dat.near`, i.e., from the Post dataset (within 5m)!!

outp <- runfun(modl = "ich_revised_xi",
               name.suffix = "preNrPst",
               datl = pre.nrPst,
               initl = list(w = drop(pre.nrPst$y)),
               iter.samp = 5000,
               min.xi.brk = 5,
               max.xi.5 = 1,
               vars = c("xi.5",
                  "xi.break",
                  "xi.beta",
                  "sigma",
                  "D", "p.pred"),
               pre = T,
               post = F)
 
##############################################################################################################
##############################################################################################################
#5.  pre_IntSc
outp <- runfun(modl = "ich_revised_tau",
               name.suffix = "preTau",
               datl = pre.near,
               initl = list(w = drop(pre.near$y)),
               iter.samp = 5000,
               min.xi.brk = 5,
               max.xi.5 = 1,
               vars = c("xi.5",
                  "xi.break",
                  "xi.beta",
                  "tau.5",
                  "tau.break",
                  "tau.beta",
                  "sigma",
#                  "deviance",
                  "D", "p.pred"),
               pre = T,
               post = F)


#modl = "ich_revised_tau"
#               name.suffix = "preTau"
#               datl = pre.near
#               initl = list(w = drop(pre.near$y))
#               iter.samp = 5000
#               min.xi.brk = 5
#               max.xi.5 = 1
#               vars = c("xi.5",
#                  "xi.break",
#                  "xi.beta",
#                  "tau.5",
#                  "tau.break",
#                  "tau.beta",
#                  "sigma",
##                  "deviance",
#                  "D", "p.pred")
#               pre = T
#               post = F
#               

##############################################################################################################
##############################################################################################################
# 6.  Model:  "both_Int"
outp <- runfun(modl = "ich_revised_tau",
               name.suffix = "jntTau",
               datl = dat.near,
               initl = list(w = dat.near$y.or),
               iter.samp = 5000,
               min.xi.brk = 5,
               max.xi.5 = 1,
               vars = c("xi.5",
                  "xi.break",
                  "xi.beta",
                  "tau.5",
                  "tau.break",
                  "tau.beta",
                  "sigma",
#                  "deviance",
                  "D", "p.pred"),
               pre = T,
               post = T)
               
               


##############################################################################################################
##############################################################################################################
#7.  pre_Conv
outp <- runfun(modl = "ich_pre_conv",
               name.suffix = "preConv",
               datl = pre.lst,
               initl = list(w = drop(pre.lst$y)),
               iter.samp = 5000,
               min.xi.brk = 5,
               max.xi.5 = 1,
               vars = c("sigma",
#                  "deviance",
                  "D", "p.pred"),
               pre = T,
               post = F)
               

##############################################################################################################
##############################################################################################################
#8.  pre_nr_Conv
outp <- runfun(modl = "ich_pre_conv",
               name.suffix = "near",
               datl = pre.near,
               initl = list(w = drop(pre.near$y)),
               iter.samp = 5000,
               min.xi.brk = 5,
               max.xi.5 = 1,
               vars = c("sigma",
#                  "deviance",
                  "D", "p.pred"),
               pre = T,
               post = F)
               
  

